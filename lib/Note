Flutter GetX----------------------------------------------------------------------------------------
ما همیشه میومدیم برای استفاده از ویجت های متریال از MaterialApp به عنوان روت استفاده میکردیم
حالا میایم از GetMaterialApp استفاده میکنیم که مال لایبرری گت ایکس هستش
در اصل یک ویجت هست که متریال اپ اصلی فرزندشه

SnackBar--------------------------------------------------------------------------------------------
titleText
messageText
این دو تا میتونن به جای تکست ساده ویجت بگیرن
و اولویت این دو تا اتریبیوت از تایتل و مسیج دیفالت بالاتره

colorText
backgroundColor
این دو تا روی تایتل و مسیج دیفالتش ست میشه

borderWidth
borderColor
حتما برای دیده شدن رنگ بردر باید قبلش ویت بدید بهش

animationDuration
مدت زمان اجرای انیمیشن
duration
مدت زمانی که اسنک بار روی صفحه می ماند

overlayBlur :
صفحه پشت رو بلور میکنه

forwardAnimationCurve
reverseAnimationCurve
یکیش انیمیشن ورود هست یکی خروج

snackbarStatus :
SnackbarStatus.OPENING
SnackbarStatus.CLOSING
SnackbarStatus.CLOSED
SnackbarStatus.OPENING
SnackbarStatus.OPEN
SnackbarStatus.CLOSING
SnackbarStatus.CLOSED

Dialog----------------------------------------------------------------------------------------------
middleText vs Content
کانتنت کاستومایز شده میدل تکست هست

Reactive State Management---------------------------------------------------------------------------
If we want that every time the value of variable changes
then all the widgets which uses variable must update itself
then the variable must be reactive or observable
================================================
1-
and to make reactive (Rx) .obs is used with variable value
var count = 0.obs ;
To update the widget which uses Rx :
variable must be placed inside
obx(()=> your widget which uses rx)
The widget will update if and only if the rx variable value changes

Other ways of making variable rx:
===============================================
2- The first is using Rx (Type)
Initial value is recommended, but not mandatory
final name = RxString('') ;
final isLogged = RxBool(false) ;
final count = RxInt(0);
final balance = RxDouble(0.0);
final items = RxList<String>([]);
final myMap = RxMap<String, int>({});

==============================================
3- Use Darts Generics, Rx<Type>
final name = Rx<String>('');
final count = Rx<Bool>(false);
final count = Rx<Int>(0);
final balance = Rx<Double>(0.0);
final number = Rx<Num>(0);
final items = Rx<List<String>>([]);
final myMap = Rx<Map<String, int>>({});

//Custom classes - it can be any class, literally
final user = Rx<User>();